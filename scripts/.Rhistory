library(ggmap)
install.packages("ggmap")
library(ggmap)
?aes
?geom_points
?geom_point
vignette("ggplot2-specs")
?ggplot2
?ggplot
install.packages("ggplot2")
library(ggplot2)
?ggplot2
source('~/Biosystems/Geoscripting/lesson10/R_datacamp_examples.R')
source('~/Biosystems/Geoscripting/lesson10/R_datacamp_examples.R')
?raster::getData()
nld <- raster::getData(name="GADM", country="NLD", level=2)
plot(nld)
library(spatstat)
plot(nld)
clickpoly(add=TRUE)
plot(nld)
poly <- clickpoly(add=TRUE)
plot(poly, add=TRUE, col='green')
print(head(poly))
print(head(nld))
head(poly)
class(poly)
library(sf)
install.packages("sf")
library(sf)
poly_sf <- st_as_sf(poly)
library(sp)
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
orderedbuffers
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
# Plot buffers
plot(orderedbuffers["Noise"])
orderedbuffers
clippedbuffers <- st_difference(orderedbuffers)
clippedbuffers
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
# Plot buffers
plot(orderedbuffers["Noise"])
clippedbuffers <- st_difference(orderedbuffers)
orderedbuffers
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
clippedbuffers
plot(clippedbuffers["Noise"])
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
orderedbuffers
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
clippedbuffers <- st_difference(orderedbuffers)
plot(clippedbuffers["Noise"])
clippedbuffers
clippedbuffers <- st_difference(st_geometry(orderedbuffers))
plot(clippedbuffers["Noise"])
clippedbuffers <- st_difference(orderedbuffers)
plot(clippedbuffers["Noise"])
clippedbuffers
?st_difference
clippedbuffers <- st_difference.sfc(orderedbuffers)
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
clippedbuffers <- st_difference(orderedbuffers)
clippedbuffers
plot(clippedbuffers["Noise"])
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
clippedbuffers <- st_difference(orderedbuffers)
clippedbuffers
orderedbuffers
a <- []
a <- list()
a
a <- list(c())
a
?append()
append(a, clippedbuffers[nrow(clippedbuffers),])
a[1]
a[2]
a[[1]]
a <- append(a, clippedbuffers[nrow(clippedbuffers),])
a
df <- data.frame()
df
rbind(orderedbuffers[1,],df)
df <- rbind(orderedbuffers[1,],df)
df
df$geometry
orderedbuffers
as.data.frame(orderedbuffers)
orderedbuffers_df <- as.data.frame(orderedbuffers)
orderedbuffers_df
class(orderedbuffers_df)
df <- rbind(df, orderedbuffers_df[1,])
df
df <- data.frame()
df <- rbind(df, orderedbuffers_df[1,])
df
df <- rbind(df, orderedbuffers_df[2,])
df
?remove()
orderedbuffers
rm(orderedbuffers[1,])
?data.frame
orderedbuffers
orderedbuffers[-1,]
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
orderedbuffers
df <- data.frame()
orderedbuffers_df <- as.data.frame(orderedbuffers)
clipbuffers <- function(orderedbuffers_df, df){
# Subtracts polygons from ordered df.
# Order in df should be increasing from top to bottom
# Highest order polygon is preserved and subtracted from lower order polygons
lastrow_i <- nrow(orderedbuffers_df)
if (lastrow_i == 1){
df <- rbind(orderedbuffers_df, df)
return(orderedbuffers)
}
else{
# Move last row from input df to output df
lastrow <- orderedbuffers_df[lastrow_i,]
orderedbuffers_df <- orderedbuffers_df[-lastrow_i,]
df <- rbind(lastrow, df)
# Subtract lastrow polygon from rest of polygons
orderedbuffers_df <- st_difference(orderedbuffers_df, st_geometry(lastrow))
clipbuffers(orderedbuffers_df, df)
}
}
clippedbuffer_df <- clipbuffers(orderedbuffers_df, df)
clippedbuffer_df <- clipbuffers(orderedbuffers, df)
clippedbuffer_df <- clipbuffers(orderedbuffers, df)
orderedbuffers
quit()
q()
sf_df <- st_sf(st_sfc())
clippedbuffer_df <- clipbuffers(orderedbuffers, sf_df)
?ggplot
?aes
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf()
library(ggplot2)
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf()
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf(alpha = 0.5)
clippedbuffer_df
sf_df
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
sf_df <- st_sf(st_sfc())
clipbuffers <- function(orderedbuffers, sf_df){
# Subtracts polygons from ordered df.
# Order in df should be increasing from top to bottom
# Highest order polygon is preserved and subtracted from lower order polygons
lastrow_i <- nrow(orderedbuffers)
if (lastrow_i == 1){
sf_df <- rbind(orderedbuffers, sf_df)
return(sf_df)
}
else{
# Move last row from input df to output df
lastrow <- orderedbuffers[lastrow_i,]
orderedbuffers <- orderedbuffers[-lastrow_i,]
sf_df <- rbind(lastrow, sf_df)
# Subtract lastrow polygon from rest of polygons
orderedbuffers <- st_difference(orderedbuffers, st_geometry(lastrow))
clipbuffers(orderedbuffers, sf_df)
}
}
clippedbuffer_df <- clipbuffers(orderedbuffers, sf_df)
library(ggplot2)
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf(alpha = 0.5)
clippedbuffer_df
clippedbuffer_df
clippedbuffer_df$area <- st_area(clippedbuffer_df)
clippedbuffer_df
ggplot(data = clippedbuffer_df) +
geom_sf(alpha = 0.5)
ggplot(data = clippedbuffer_df)
ggplot(data = clippedbuffer_df) +
geom_sf()
ggplot(data = clippedbuffer_df) +
geom_sf(alpha=0)
buffers <- rbind(circles,bigbuffers)
buffers$area
buffers$nothing
?st_union
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
ggplot(data = clippedbuffers) +
geom_sf(alpha=0)
plot(orderedcircles["Noise"])
ggplot(data = orderedbuffers) +
geom_sf(alpha=0)
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
ggplot(data = orderedbuffers) +
geom_sf(alpha=0)
buffers
?summarize
grouped_buffers <- buffers %>%
groupby(Noise) %>%
summarize()
?groupby
library(tidyverse)
install.packages(tidyverse)
library(dplyr)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
grouped_buffers <- buffers %>%
groupby(Noise) %>%
summarize()
?group_by
grouped_buffers <- buffers %>%
group_by(Noise) %>%
summarize()
grouped_buffers
class(grouped_buffers)
plot(st_geometry(grouped_buffers))
grouped_buffers <- group_buffers(buffers)
orderedbuffers <- buffers[order(Noise,decreasing=FALSE),]
?order
groupedOrderedBuffers <- grouped_buffers[order(grouped_buffers$Noise),]
grouped_buffers
group_buffers <- function(buffers){
grouped_buffers <- buffers %>%
group_by(Noise) %>%
summarize()
return(grouped_buffers)
}
grouped_buffers <- group_buffers(buffers)
groupedOrderedBuffers <- grouped_buffers[order(grouped_buffers$Noise),]
groupedOrderedBuffers
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
par(mfrow=c(1,2))
ggplot(data = clipped_grouped_buffers) +
geom_sf(alpha=0)
ggplot(data = clipped_buffers) +
geom_sf(alpha=0)
st_agr(buffers$geometry) = 'constant'
st_agr(geometry) = 'constant'
st_agr(buffers$geometry) = "constant"
?st_agr
class(buffers$geometry)
st_agr(buffers) = "constant"
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
points
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
rlang::last_error()
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source("polygon_operations.R")
source("shiny_leaflet.R")
unix_time <- as.numeric(Sys.time())
request_now <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time)
request_past <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time - 10)
planeData <- getPlaneData(request_now)
planeData_past <- getPlaneData(request_past)
source("polygon_operations.R")
setwd("~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts")
source("polygon_operations.R")
source("shiny_leaflet.R")
unix_time <- as.numeric(Sys.time())
request_now <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time)
request_past <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time - 10)
planeData <- getPlaneData(request_now)
planeData_past <- getPlaneData(request_past)
request_now <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time)
request_past <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time - 10)
planeData <- getPlaneData(request_now)
planeData <- getPlaneData(request_now)
request_now
unix_time <- round(as.numeric(Sys.time()))
request_now <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time)
request_past <- sprintf("time=%s&lamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time - 10)
planeData <- getPlaneData(request_now)
planeData_past <- getPlaneData(request_past)
request_past
planeData_past <- getPlaneData(request_past)
planeData <- getPlaneData(request_now)
planeData
planeData_past <- getPlaneData(request_past)
request_past
request_now
request_now <- sprintf("begin=%s&end=%slamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time - 100, unix_time)
planeData <- getPlaneData(request_now)
planeData
url <- paste0("https://R-mateys:Microsoft-flightsim@opensky-network.org/api/states/all?", request)
request <- sprintf("begin=%s&end=%slamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time - 100, unix_time)
url <- paste0("https://R-mateys:Microsoft-flightsim@opensky-network.org/api/states/all?", request)
PlaneData <- jsonlite::fromJSON(url)
PlaneData
str(PlaneData)
request
request <- sprintf("begin=%s&end=%slamin=51.000&lomin=3.000&lamax=53.000&lomax=7.000", unix_time - 1000, unix_time)
url <- paste0("https://R-mateys:Microsoft-flightsim@opensky-network.org/api/states/all?", request)
PlaneData <- jsonlite::fromJSON(url)
str(PlaneData)
PlaneData$time
url
PlaneData$states
head(PlaneData$states)
tail(PlaneData$states)
